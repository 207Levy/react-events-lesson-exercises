[
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3382796862",
  "source": {
   "name": "Hello world",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "asd",
   "points": "999",
   "incorrectPoints": "0",
   "multipleResponse": false,
   "learningObjectives": "",
   "answers": [
    {
     "_id": "565452c1-ef4b-d18d-0fd5-cbdf738d33a4",
     "correct": true,
     "answer": "Correct"
    },
    {
     "_id": "971e2f0c-867a-3baf-8311-5f7eb4539a74",
     "correct": false,
     "answer": "Incorrect"
    }
   ]
  }
 },
 {
  "type": "test",
  "taskId": "test-2820452769",
  "source": {
   "name": "Exercise 1",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": false,
   "instructions": "So far we could only access our `directory/:fentity` routes by actually writing that out in the browser's URL... like some neanderthal savage.\n\nUsing what you know about the `Link` tag, make some static links in the `Home` component that take the user to the appropriate page.\n\nYou'll know you did it right when you can click any of these (below the search bar):\n\n![gif](https://s3-us-west-2.amazonaws.com/learn-app/lesson-images/react-router-landing.PNG)\n\n...and get to the appropriate `/directory/:fentities` route (i.e `directory/wizards` or `directory/bestiary`.\n\n**Hint**: remember, the `Link` component acts like a normal HTML tag - you can use it to wrap other HTML as well.",
   "command": "node .test/test-runner ex-1",
   "learningObjectives": "",
   "points": 1,
   "timeoutSeconds": 40
  }
 },
 {
  "type": "test",
  "taskId": "test-1729079255",
  "source": {
   "name": "Exercise 2",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": false,
   "instructions": "The last thing that's really missing is getting from `directory/wizards` to `directory/wizards/merlin`. You'll need to do three things:\n\n1.  Wrap the `mini` div in `Fentities` with a `Link` - it'll have to be a dynamic link\n\n*   The `to` attribute of the `Link` should resolve to (for example) `wizards/merlin` - remember you're just combining different pieces of data from the `match` object\n*   Using [string interlopation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals) will be helpful\n\n3.  Create and handle the actual `/directory/:fentities/:name` route in the `App` component\n4.  Define the `fentity` variable inside `Fentity.js` - you'll use `match` as well as the `state` again\n\n*   Hint: console logging `match` again will be useful here\n\nFor the last one, since it's not really related to routes, you shouldn't spend too much time on. Here's a solution if it's taking you too long:\n\n```javascript\nconst match = this.props.match\nconst fentitiesCategory = match.params.fentities\nconst name = match.params.name\n\nconst fentity = this.props.state[fentitiesCategory].filter(f => {\n    return f.name.toLowerCase() === name.toLowerCase()\n})[0]\n```\n\n*   Get the `fentitiesCategory` just like we did before\n*   Extract the `name` from `match.params` - remember that by adding `:/name` to the end of the route adds it to the match parameters!\n*   Filter through each of the state's wizards (for example), until you find the one with the relevant name - return the first since the name should be unique\n\nWhen you figure this exercise out, then clicking Morgana in this:\n\n![](https://s3-us-west-2.amazonaws.com/learn-app/lesson-images/react-router-params-wizards.PNG)\n\n...will take you to this page:\n\n![](https://s3-us-west-2.amazonaws.com/learn-app/lesson-images/react-router-morgana-page.PNG)",
   "command": "node .test/test-runner ex-2",
   "learningObjectives": "",
   "points": 1,
   "timeoutSeconds": 40
  }
 },
 {
  "type": "test",
  "taskId": "test-303948028",
  "source": {
   "name": "Exercise 3",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": false,
   "instructions": "This one is just for fun, but check out `directory/wizards/morgana le fay`'s caption at the bottom. Notice how the name `Merlin` is in there?\n\nChange Morgana's `other` field in `App`'s `state` to make it so that the word _Merlin_ is a direct link (hard-coded) to Merlin's page.",
   "command": "node .test/test-runner ex-3",
   "learningObjectives": "",
   "points": 1,
   "timeoutSeconds": 40
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1013919037",
  "source": {
   "name": "Question #1",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "The BrowserRouter (Router, for short) tag...",
   "points": "999",
   "incorrectPoints": "0",
   "multipleResponse": false,
   "learningObjectives": "",
   "answers": [
    {
     "_id": "4e9822c1-49dd-1ed1-0922-1c6f4cc792b8",
     "correct": false,
     "answer": "Should generally only be used once, in App.js"
    },
    {
     "_id": "6725365b-5331-fb0c-987f-853123ccca90",
     "correct": false,
     "answer": "Can only be used once, in App.js"
    },
    {
     "_id": "e049f7e5-387b-dee6-8d56-d5dc34fd66bd",
     "correct": false,
     "answer": "Must wrap all its children in one element, like the render method"
    },
    {
     "_id": "ac1580f1-6ac7-8535-7351-7c2e641574b7",
     "correct": false,
     "answer": "Can have many direct children elements"
    },
    {
     "_id": "d7a89d86-de15-37fb-e383-7425dd5632d9",
     "correct": true,
     "answer": "a and c"
    },
    {
     "_id": "b7f5d2e3-a0c4-a6de-4cf1-e3ce0d79ee98",
     "correct": false,
     "answer": "b and d"
    },
    {
     "_id": "b3ee4d4b-ad11-6d00-d35e-93af82179c6a",
     "correct": false,
     "answer": "None of the above"
    }
   ]
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2252330227",
  "source": {
   "name": "Question #2",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "To load components depending on a certain route...",
   "points": "999",
   "incorrectPoints": "0",
   "multipleResponse": false,
   "learningObjectives": "",
   "answers": [
    {
     "_id": "36e30b83-8d2d-2b13-5a6a-098027aad87d",
     "correct": false,
     "answer": "We should always use the component attribute"
    },
    {
     "_id": "f0fabc54-7546-986a-2a04-558dc9856d1e",
     "correct": false,
     "answer": "We should always use the render attribute"
    },
    {
     "_id": "501941ae-1a69-bcb1-9a43-246324978804",
     "correct": false,
     "answer": "We should always pass the match property"
    },
    {
     "_id": "a2b10813-2276-2513-11db-79c1d06158cc",
     "correct": true,
     "answer": "None of the above"
    },
    {
     "_id": "8e4fdcfa-5b80-569e-c9eb-899581d98c54",
     "correct": false,
     "answer": "All of the above"
    }
   ]
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-434018958",
  "source": {
   "name": "Question #3",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "What can we say about regex matching in the context of `react-router-dom`?",
   "points": "999",
   "incorrectPoints": "0",
   "multipleResponse": false,
   "learningObjectives": "",
   "answers": [
    {
     "_id": "b6ad48cb-e264-f454-2c1a-0e45eb43e302",
     "correct": false,
     "answer": "Regex (regular expressions) have nothing to do with routes"
    },
    {
     "_id": "e85b5415-4205-99ca-e3bd-d5af08aea0f4",
     "correct": false,
     "answer": "Regex matching only matters if we use “exact” in our Route"
    },
    {
     "_id": "cbfbac8d-ae2f-dd36-a4e0-d3c78bdc8c1c",
     "correct": true,
     "answer": "If we don’t use exact, Router will use regex to find matches in our “path” attribute, and render accordingly"
    },
    {
     "_id": "be5807fd-707b-81ad-f90b-7916c5cfe236",
     "correct": false,
     "answer": "We need to write correct regular expressions in our “path”"
    }
   ]
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3715095520",
  "source": {
   "name": "Question #4",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "The way to pass data to a route is...",
   "points": "999",
   "incorrectPoints": "0",
   "multipleResponse": false,
   "learningObjectives": "",
   "answers": [
    {
     "_id": "4e3613bc-bc36-ff20-7181-db15b7a6cc98",
     "correct": true,
     "answer": "Effectively the same as passing down props"
    },
    {
     "_id": "71c0cc00-0628-9143-6a7a-0fb8c8cb6337",
     "correct": false,
     "answer": "Requires arrow syntax for the props themselves"
    },
    {
     "_id": "eae48b25-00b0-e7a9-295a-d712c97e3258",
     "correct": false,
     "answer": "Not related to routes - this has to do with components"
    },
    {
     "_id": "4552d306-5d52-8e3f-2d7f-89d6ba1e80d6",
     "correct": false,
     "answer": "Limited, we can only pass one piece of data (i.e. no arrays or objects)"
    }
   ]
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3530427862",
  "source": {
   "name": "Question #6",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "When we’re on a route like “/users/1”, can we access the 1 with Router?",
   "points": "999",
   "incorrectPoints": "0",
   "multipleResponse": false,
   "learningObjectives": "",
   "answers": [
    {
     "_id": "3929b322-e788-b6b0-447e-e80b5e492670",
     "correct": false,
     "answer": "No, we need to use the HTML5 History API"
    },
    {
     "_id": "17d1c450-8874-d514-6765-140b95c9a21b",
     "correct": false,
     "answer": "No, we should pass it as props"
    },
    {
     "_id": "039e2fb6-b63d-3e32-e067-bd339b38768b",
     "correct": true,
     "answer": "Yes, we use this.props.match"
    },
    {
     "_id": "94bbb6dc-97b1-21c3-33ed-c30ba18ecd27",
     "correct": false,
     "answer": "Yes, we use this.props.currentURL"
    }
   ]
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-95992611",
  "source": {
   "name": "Question #6",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "If we have a route like /posts/latest/3...",
   "points": "999",
   "incorrectPoints": "0",
   "multipleResponse": false,
   "learningObjectives": "",
   "answers": [
    {
     "_id": "fad76799-1d03-d8a1-0c01-fc02d6301eb8",
     "correct": false,
     "answer": "We can’t properly use the Link tag"
    },
    {
     "_id": "36c09bd9-400a-40a0-4583-9fe70effbc9e",
     "correct": false,
     "answer": "We should use a normal a tag with an href attribute to access it"
    },
    {
     "_id": "7446aed9-53ca-6808-22a3-2b1d38d8ad98",
     "correct": true,
     "answer": "Neither of the above"
    },
    {
     "_id": "903f120a-595b-1af6-c11a-cc90da38828c",
     "correct": false,
     "answer": "Both of the above"
    }
   ]
  }
 },
 {
  "type": "test",
  "taskId": "test-2625869852",
  "source": {
   "name": "Extension 1",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": false,
   "instructions": "Add a dynamic `Link` in `Fentity` that allows the user to go back to the `Fentities` page.\n\nFor example, if the user is on <code>directory/bestiary/pegasus</code>, there should be a link that - when clicked - brings him back to <code>directory/bestiary</code> - you should use <code>match</code>.\n\n**Note**: this exercise is not tested automatically. It will always show as passed.",
   "command": "",
   "learningObjectives": "",
   "points": 999,
   "timeoutSeconds": 40
  }
 },
 {
  "type": "test",
  "taskId": "test-535924639",
  "source": {
   "name": "Extension 2",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": false,
   "instructions": "What happens if a crafty user tries to go to `directory/bestiary/derp`, and you don't have a `derp` in your `bestiary` array in `state`? Read up about [redirects](https://reacttraining.com/react-router/web/api/Redirect) and see what you can do with that.\n\n**Hint:** you can check a simple condition and use redirect then. Don't forget your imports ;)\n\n**Note**: this exercise is not tested automatically. It will always show as passed.\n",
   "command": "",
   "learningObjectives": "",
   "points": 999,
   "timeoutSeconds": 40
  }
 },
 {
  "type": "test",
  "taskId": "test-3862249123",
  "source": {
   "name": "Extension 3",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": false,
   "instructions": "This one is non-trivial.\n\nHow about that search bar, huh? Add some code such that when the user types something:\n\n*   A drop down appears below the input with all the matching names - i.e. if the user types \"r\", then Merlin, Morgana, _and_ Cerebrus should appear\n\n*   When the user clicks on one of the drop-down items, it should link to that page\n\n*   If the user presses enter or hits the \"Seek\" button after typing, it should link to the first result of the drop down\n\n  \n\nThere are a number of ways to do this. Be creative, have fun =\\]\n\n**Note**: this exercise is not tested automatically. It will always show as passed.",
   "command": "",
   "learningObjectives": "",
   "points": 999,
   "timeoutSeconds": 40
  }
 }
]